import { ReactElement, JSXElementConstructor } from "react";
import { Group, Mesh, Vector3 } from "three";
import { CTX3 } from "../../etc/0000_api/three-ctx";
import { ControlType } from "./control.type";
import { GamepadControl } from "./gamepad.control";
import { KeyboardState } from "./keyboard.control";
import { MouseState } from "./mouse.control";
import { ScrollControl } from "./scroll/scroll.control";
import { TouchControl } from "./touch.control";
import { CameraTrack } from "./track/camera-track";
import { XRController } from "@react-three/xr";
import { XRControllerState } from "./xr-controlls";
import { Systems, System } from "..";
import { EntityState } from "../../entity";
export declare class UserControlsSystem implements System {
    private ctx3;
    private movement;
    private rotation;
    private rollVelocity;
    private keyRotationVelocity;
    roll: Vector3;
    moveVector: Vector3;
    velocity: Vector3;
    enableFlying: boolean;
    controllersAttached: boolean;
    xrControllers: XRController[];
    xr_player: Group | null;
    mode: ControlType;
    track: CameraTrack;
    gamepad: GamepadControl;
    touch: TouchControl;
    mouse: MouseState;
    keys: KeyboardState;
    xrControls: XRControllerState;
    cursorHidden: boolean;
    cursorActivated: number;
    cursorPosition: [number, number, number] | null;
    private scrollDistance;
    private scrollDomain;
    scrollControl: ScrollControl;
    constructor();
    registerComponent(component: ReactElement<any, string | JSXElementConstructor<any>>, state: EntityState): void;
    update(delta: number, context: Systems): void;
    removeComponent(component: any): void;
    get dependencies(): CTX3 | null;
    toggleManualCameraControl(mode?: ControlType): void;
    scroll(to: number): void;
    handlePointerOver: (mesh?: Mesh) => void;
    handlePointerOut: (mesh?: Mesh) => void;
    private getPositionFromMatrix;
    private calculatePosition;
    private calculateManualNonVRCameraMovement;
    private calculateNonVRCameraMovementStep1;
    private calculateNonVRCameraMovementStep3;
    private handleKeyboardCameraRotation;
    private calculateMoveVector;
    private calculateRotationVector;
}
//# sourceMappingURL=control.d.ts.map